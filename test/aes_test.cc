#include "main.h"

template<int kKeySize>
struct AesFuncs;

template<>
struct AesFuncs<16>{
	using Key = std::array<uint8_t, 16>;
	using Data = std::array<uint8_t, 16>;
	static void deckey(const Key &in, Key &out) { aes128_deckey(in.data(), out.data()); }
	static void encrypt_ecb(const Key &k, Data &d) { aes128_encrypt_ecb(k.data(), d.data()); }
	static void decrypt_ecb(const Key &k, Data &d) { aes128_decrypt_ecb(k.data(), d.data()); }
};

template<>
struct AesFuncs<32>{
	using Key = std::array<uint8_t, 32>;
	using Data = std::array<uint8_t, 16>;
	static void deckey(const Key &in, Key &out) { aes256_deckey(in.data(), out.data()); }
	static void encrypt_ecb(const Key &k, Data &d) { aes256_encrypt_ecb(k.data(), d.data()); }
	static void decrypt_ecb(const Key &k, Data &d) { aes256_decrypt_ecb(k.data(), d.data()); }
};

template<int kKeySize>
void aes_test_ecb(const char *key, const char *plain, const char *cypher)
{
	std::array<uint8_t, kKeySize> bkey;
	std::array<uint8_t, 16> bplain;
	std::array<uint8_t, 16> bplainenc;
	std::array<uint8_t, 16> bcypher;
	std::array<uint8_t, 16> bcypherdec;
	ASSERT_EQ(b16_decode(key,    -1, bkey.data(),    kKeySize), kKeySize);
	ASSERT_EQ(b16_decode(plain,  -1, bplain.data(),  16), 16);
	ASSERT_EQ(b16_decode(cypher, -1, bcypher.data(), 16), 16);
	bplainenc = bplain;
	bcypherdec = bcypher;
	std::array<uint8_t, kKeySize> enckey = bkey;
	std::array<uint8_t, kKeySize> deckey;
	AesFuncs<kKeySize>::deckey(enckey, deckey);
	AesFuncs<kKeySize>::encrypt_ecb(enckey, bplainenc);
	AesFuncs<kKeySize>::decrypt_ecb(deckey, bcypherdec);
	EXPECT_EQ(bplainenc, bcypher);
	EXPECT_EQ(bcypherdec, bplain);
}

TEST(aes, x128)
{
	aes_test_ecb<16>("000102030405060708090A0B0C0D0E0F", "00112233445566778899AABBCCDDEEFF", "69C4E0D86A7B0430D8CDB78070B4C55A");
	aes_test_ecb<16>("2B7E151628AED2A6ABF7158809CF4F3C", "6BC1BEE22E409F96E93D7E117393172A", "3AD77BB40D7A3660A89ECAF32466EF97");
	aes_test_ecb<16>("2B7E151628AED2A6ABF7158809CF4F3C", "AE2D8A571E03AC9C9EB76FAC45AF8E51", "F5D3D58503B9699DE785895A96FDBAAF");
	aes_test_ecb<16>("2B7E151628AED2A6ABF7158809CF4F3C", "30C81C46A35CE411E5FBC1191A0A52EF", "43B1CD7F598ECE23881B00E3ED030688");
	aes_test_ecb<16>("2B7E151628AED2A6ABF7158809CF4F3C", "F69F2445DF4F9B17AD2B417BE66C3710", "7B0C785E27E8AD3F8223207104725DD4");
}

TEST(aes, x256)
{
	aes_test_ecb<32>("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F", "00112233445566778899AABBCCDDEEFF", "8EA2B7CA516745BFEAFC49904B496089");
	aes_test_ecb<32>("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "6BC1BEE22E409F96E93D7E117393172A", "F3EED1BDB5D2A03C064B5A7E3DB181F8");
	aes_test_ecb<32>("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "AE2D8A571E03AC9C9EB76FAC45AF8E51", "591CCB10D410ED26DC5BA74A31362870");
	aes_test_ecb<32>("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "30C81C46A35CE411E5FBC1191A0A52EF", "B6ED21B99CA6F4F9F153E7B1BEAFED1D");
	aes_test_ecb<32>("603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "F69F2445DF4F9B17AD2B417BE66C3710", "23304B7A39F9F3FF067D8D8F9E24ECC7");
	aes_test_ecb<32>("0000000000000000000000000000000000000000000000000000000000000000", "80000000000000000000000000000000", "DDC6BF790C15760D8D9AEB6F9A75FD4E");
	aes_test_ecb<32>("0000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000001", "530F8AFBC74536B9A963B4F1C4CB738B");
}

//"000102030405060708090A0B0C0D0E0F1011121314151617", "00112233445566778899AABBCCDDEEFF", "DDA97CA4864CDFE06EAF70A0EC0D7191");
//aes_test_ecb("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", "6BC1BEE22E409F96E93D7E117393172A", "BD334F1D6E45F25FF712A214571FA5CC");
//aes_test_ecb("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", "AE2D8A571E03AC9C9EB76FAC45AF8E51", "974104846D0AD3AD7734ECB3ECEE4EEF");
//aes_test_ecb("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", "30C81C46A35CE411E5FBC1191A0A52EF", "EF7AFD2270E2E60ADCE0BA2FACE6444E");
//aes_test_ecb("8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B", "F69F2445DF4F9B17AD2B417BE66C3710", "9A4B41BA738D6C72FB16691603C18E0E");
